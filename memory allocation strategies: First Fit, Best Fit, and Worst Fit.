#include <stdio.h>
#include <stdlib.h>

#define NUM_BLOCKS 5
#define NUM_REQUESTS 10

// Define a block of memory
struct block {
    int start;
    int size;
    int free;
};

// Define an allocation request
struct request {
    int size;
};

// Global variables
struct block blocks[NUM_BLOCKS];
struct request requests[NUM_REQUESTS];

// Function to initialize the blocks of memory
void init_blocks() {
    int i;
    for (i = 0; i < NUM_BLOCKS; i++) {
        blocks[i].start = i * 10;
        blocks[i].size = 10;
        blocks[i].free = 1;
    }
}

// Function to print the blocks of memory
void print_blocks() {
    int i;
    printf("Blocks of memory:\n");
    for (i = 0; i < NUM_BLOCKS; i++) {
        printf("[%d-%d] %s\n", blocks[i].start, blocks[i].start + blocks[i].size - 1, blocks[i].free ? "Free" : "Used");
    }
}

// Function to allocate memory using first fit strategy
void first_fit() {
    int i, j;
    for (i = 0; i < NUM_REQUESTS; i++) {
        int found = 0;
        for (j = 0; j < NUM_BLOCKS; j++) {
            if (blocks[j].free && blocks[j].size >= requests[i].size) {
                blocks[j].free = 0;
                printf("Allocated %d bytes from block %d\n", requests[i].size, j);
                found = 1;
                break;
            }
        }
        if (!found) {
            printf("Failed to allocate %d bytes\n", requests[i].size);
        }
    }
}

// Function to allocate memory using best fit strategy
void best_fit() {
    int i, j;
    for (i = 0; i < NUM_REQUESTS; i++) {
        int best_block = -1;
        for (j = 0; j < NUM_BLOCKS; j++) {
            if (blocks[j].free && blocks[j].size >= requests[i].size) {
                if (best_block == -1 || blocks[j].size < blocks[best_block].size) {
                    best_block = j;
                }
            }
        }
        if (best_block != -1) {
            blocks[best_block].free = 0;
            printf("Allocated %d bytes from block %d\n", requests[i].size, best_block);
        } else {
            printf("Failed to allocate %d bytes\n", requests[i].size);
        }
    }
}

// Function to allocate memory using worst fit strategy
void worst_fit() {
    int i, j;
    for (i = 0; i < NUM_REQUESTS; i++) {
        int worst_block = -1;
        for (j = 0; j < NUM_BLOCKS; j++) {
            if (blocks[j].free && blocks[j].size >= requests[i].size) {
                if (worst_block == -1 || blocks[j].size > blocks[worst_block].size) {
                    worst_block = j;
                }
            }
        }
        if (worst_block != -1) {
            blocks[worst_block].free = 0;
            printf("Allocated %d bytes from block %d\n", requests[i].size, worst_block);
        } else {
            printf("Failed to allocate %d bytes\n", requests[i
